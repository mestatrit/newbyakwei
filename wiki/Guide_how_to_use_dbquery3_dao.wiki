创建dao接口，继承com.dev3g.cactus.dao.query.IDao

{{{

package demo.svr.dao;

import java.util.List;

import com.dev3g.cactus.dao.query.IDao;

import demo.bean.UserInfo;

public interface UserInfoDao extends IDao<UserInfo> {

	List<UserInfo> getListByGender(int gender, int begin, int size);
}

}}}

实现接口

{{{

package demo.svr.dao.impl;

import java.util.List;

import com.dev3g.cactus.dao.query.BaseDao;

import demo.bean.UserInfo;
import demo.svr.dao.UserInfoDao;

/**
 * insert update delete selectById 等单表操作的方法已经在IDao中定义，并在BaseDao中实现，所以可以直接用
 * 
 * @author akwei
 */
public class UserInfoDaoImpl extends BaseDao<UserInfo> implements UserInfoDao {

	@Override
	public Class<UserInfo> getClazz() {
		// 返回对应的class，用来指定当前dao操作的表
		return UserInfo.class;
	}

	@Override
	public List<UserInfo> getListByGender(int gender, int begin, int size) {
		return this.getList("gender=?", new Object[] { gender }, "nick asc",
				begin, size);
		// 如果是按照gender分表：
//		return this.getList(gender, "gender=?", new Object[] { gender },
//				"nick asc", begin, size);
	}
}

}}}

如果要进行 insert update delete getById的操作，不需要在接口中声明，因为IDao已经声明过这些方法了，BaseDao已经实现了这些方法，所以可以直接调用这些方法，例如在service中调用：

创建Service接口:

{{{

package demo.svr;

import demo.bean.UserInfo;

public interface UserInfoService {

	void createUserInfo(UserInfo userInfo);

	void updateUserInfo(UserInfo userInfo);

	void deleteUserInfo(long userid);

	UserInfo getUserInfo(long userid);
}


}}}

实现Service接口：

{{{

package demo.svr.impl;

import org.springframework.beans.factory.annotation.Autowired;

import demo.bean.UserInfo;
import demo.svr.UserInfoService;
import demo.svr.dao.UserInfoDao;

public class UserInfoSvrviceImpl implements UserInfoService {

	@Autowired
	private UserInfoDao userInfoDao;

	@Override
	public void createUserInfo(UserInfo userInfo) {
		this.userInfoDao.save(userInfo);
	}

	@Override
	public void deleteUserInfo(long userid) {
		this.userInfoDao.deleteById(userid);
	}

	@Override
	public UserInfo getUserInfo(long userid) {
		return this.userInfoDao.getById(userid);
	}

	@Override
	public void updateUserInfo(UserInfo userInfo) {
		this.userInfoDao.update(userInfo);
	}
}


}}}